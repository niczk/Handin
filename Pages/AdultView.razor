@page "/adults"
@using Handin1.Data
@using Handin1.Model
@inject IAdultList AdultList
 
<h3>View Adults</h3>
<table width="100%">
    <tr>
        <td>
            Filter by First Name:
            <input type="text" @oninput="@((arg) => FilterByFirstName(arg))" style="width:150px;" />
        </td>
        <td>
            Filter by Last Name:
            <input type="text" @oninput="@((arg) => FilterByLastName(arg))" style="width:150px;" />
        </td>
        <td>
            Filter by Job Title:
            <input type="text" @oninput="@((arg) => FilterByJob(arg))" style="width:150px;" />
        </td>
    </tr>
</table>

@if (adults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if(!adults.Any())
{
    <p>
        <em>No adults exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Job Title</th>
                <th>Hair Color</th>
                <th>Eye Color</th>
                <th>Age</th>
                <th>Weight</th>
                <th>Height</th>
                <th>Sex</th>
                <AuthorizeView Policy="SecurityLevel1">
                    <th>Remove</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach(var item in adultsFiltered)
            {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.JobTitle</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight kg</td>
                <td>@item.Height cm</td>
                <td>@item.Sex</td>
                <AuthorizeView Policy="SecurityLevel1">
                    <td>
                        <button @onclick="@(() => RemoveAdult(item.Id))">
                            <i class="oi oi-trash" style="color:red" />
                        </button>
                    </td>
                </AuthorizeView>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private IList<Adult> adults;
    private IList<Adult> adultsFiltered;

    string? filterbyFirstName = null;
    string? filterByLastName = null;
    string? filterByJob = null;

    private async Task RemoveAdult(int adultId)
    {
        Adult adultToRemove = adults.First(a => a.Id == adultId);
        await AdultList.RemoveAdult(adultId);
        adults.Remove(adultToRemove);
    }

    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filterbyFirstName = null;
        try
        {
            filterbyFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e) { }
        ExecuteFilter();
    }

    private void FilterByLastName(ChangeEventArgs changeEventArgs)
    {
        filterByLastName = null;
        try
        {
            filterByLastName = changeEventArgs.Value.ToString();
        }
        catch (Exception e) { }
        ExecuteFilter();
    }

    private void FilterByJob(ChangeEventArgs changeEventArgs)
    {
        filterByJob = null;
        try
        {
            filterByJob = changeEventArgs.Value.ToString();
        }
        catch (Exception e) { }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsFiltered = adults.Where(a =>
            (filterbyFirstName != null && a.FirstName.Contains(filterbyFirstName) || filterbyFirstName == null) &&
            (filterByLastName != null && a.LastName.Contains(filterByLastName) || filterByLastName == null) &&
            (filterByJob != null && a.JobTitle.Contains(filterByJob) || filterByJob == null)
        ).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        adults = await AdultList.GetAdults();
        adultsFiltered = adults;
    }
}
